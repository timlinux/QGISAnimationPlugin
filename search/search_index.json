{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QGIS Animation Workbench","text":"<p>Welcome to the QGIS Animation Workbench (QAW). QAW is a QGIS Plugin that will help you bring your maps to life! Let's start with a quick overview. Click on the image below to view a 14 minute walkthrough on YouTube.</p> <p></p>"},{"location":"#why-qgis-animation-workbench","title":"\ud83e\udd16 Why QGIS Animation Workbench?","text":"<p>QGIS Animation Bench exists because we wanted to use all the awesome cartography features in QGIS and make cool, animated maps! QGIS already includes the Temporal Manager which allows you to produce animations for time-based data. But what if you want to make animations where you travel around the map, zooming in and out, and perhaps making features on the map wiggle and jiggle as the animation progresses? That is what the animation workbench tries to solve...</p>"},{"location":"#features","title":"\ud83c\udfa8 Features","text":"<ul> <li>Modes : Supports 3 modes: Sphere, Planar and Static.</li> <li>Sphere: Creates a spinning globe effect. Like Google Earth might do, but with your own data and cartography.</li> <li>Planar: Lets you move from feature to feature on a flat map, pausing at each if you want to.</li> <li>Static: The frame of reference stays the same and you can animate the symbology within that scene.</li> <li>Add music to your exported videos - see the Creative Commons website for a list of places where you can download free music (make sure it does not have a 'No Derivative Works' license).</li> <li>Multithreaded, efficient rendering workflow. The plugin is designed to work well even on very modest hardware. If you have a fast PC, you can crank up the size to the thread pool to process more jobs at the same time.</li> </ul> <p>Supports only English currently - we may add other languages in the future if there is demand.</p>"},{"location":"about/code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"about/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"about/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behaviour that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behaviour by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/code-of-conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behaviour and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behaviour.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"about/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"about/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident.  Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"about/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"about/contribute/","title":"Contribute","text":""},{"location":"about/contribute/#pull-request-steps","title":"\ud83d\udd27 Pull Request Steps","text":"<p>This project is open source, so you can create a pull request(PR) after you fix issues. Get a local copy of the plugins checked out for development using the following process.</p>"},{"location":"about/contribute/#pull-request","title":"Pull Request","text":"<p>Before uploading your PR, run test one last time to check if there are any errors. If it has no errors, commit and then push it!</p> <p>For more information on PR's steps, please see links in the Contributing section.</p>"},{"location":"about/contribute/#commit-messages","title":"Commit messages","text":"<p>Please make this project more fun and easy to scan by using emoji prefixes for your commit messages (see GitMoji).</p> Commit type Emoji Initial commit \ud83c\udf89 <code>:tada:</code> Version tag \ud83d\udd16 <code>:bookmark:</code> New feature \u2728 <code>:sparkles:</code> Bugfix \ud83d\udc1b <code>:bug:</code> Metadata \ud83d\udcc7 <code>:card_index:</code> Documentation \ud83d\udcda <code>:books:</code> Documenting source code \ud83d\udca1 <code>:bulb:</code> Performance \ud83d\udc0e <code>:racehorse:</code> Cosmetic \ud83d\udc84 <code>:lipstick:</code> Tests \ud83d\udea8 <code>:rotating_light:</code> Adding a test \u2705 <code>:white_check_mark:</code> Make a test pass \u2714\ufe0f <code>:heavy_check_mark:</code> General update \u26a1\ufe0f <code>:zap:</code> Improve format/structure \ud83c\udfa8 <code>:art:</code> Refactor code \ud83d\udd28 <code>:hammer:</code> Removing code/files \ud83d\udd25 <code>:fire:</code> Continuous Integration \ud83d\udc9a <code>:green_heart:</code> Security \ud83d\udd12 <code>:lock:</code> Upgrading dependencies \u2b06\ufe0f <code>:arrow_up:</code> Downgrading dependencies \u2b07\ufe0f <code>:arrow_down:</code> Lint \ud83d\udc55 <code>:shirt:</code> Translation \ud83d\udc7d <code>:alien:</code> Text \ud83d\udcdd <code>:pencil:</code> Critical hotfix \ud83d\ude91 <code>:ambulance:</code> Deploying stuff \ud83d\ude80 <code>:rocket:</code> Fixing on MacOS \ud83c\udf4e <code>:apple:</code> Fixing on Linux \ud83d\udc27 <code>:penguin:</code> Fixing on Windows \ud83c\udfc1 <code>:checkered_flag:</code> Work in progress \ud83d\udea7  <code>:construction:</code> Adding CI build system \ud83d\udc77 <code>:construction_worker:</code> Analytics or tracking code \ud83d\udcc8 <code>:chart_with_upwards_trend:</code> Removing a dependency \u2796 <code>:heavy_minus_sign:</code> Adding a dependency \u2795 <code>:heavy_plus_sign:</code> Docker \ud83d\udc33 <code>:whale:</code> Configuration files \ud83d\udd27 <code>:wrench:</code> Package.json in JS \ud83d\udce6 <code>:package:</code> Merging branches \ud83d\udd00 <code>:twisted_rightwards_arrows:</code> Bad code / need improv. \ud83d\udca9 <code>:hankey:</code> Reverting changes \u23ea <code>:rewind:</code> Breaking changes \ud83d\udca5 <code>:boom:</code> Code review changes \ud83d\udc4c <code>:ok_hand:</code> Accessibility \u267f\ufe0f <code>:wheelchair:</code> Move/rename repository \ud83d\ude9a <code>:truck:</code> Other Be creative"},{"location":"about/contribute/#contributing","title":"\ud83d\udcac Contributing","text":"<ul> <li>Code of Conduct</li> <li>Contributing Guideline</li> <li>Commit Convention</li> <li>Issue Guidelines</li> </ul>"},{"location":"about/credits/","title":"Credits","text":""},{"location":"about/credits/#author","title":"Author","text":"<p>This plugin was developed by:</p> Tim Sutton Nyall Dawson Jeremy Prior Coder and Ideas Guy Genius Guru of Awesomeness Document and Logo Guy timlinux @ github nyalldawson @ github Jeremy-Prior @ github"},{"location":"about/credits/#contributors","title":"Contributors","text":"<p>Thanks to:</p> <ul> <li>Mathieu Pellerin (@nirvn)</li> <li>Thiasha Vythilingam (@ThiashaV)</li> </ul> <p>We are looking for contributors, add yourself here!</p> <p>Also:</p> <ul> <li>NHN and Tui Editor for the great README which I based this one on.</li> </ul>"},{"location":"about/license/","title":"GNU General Public License","text":"<p>Version 2, June 1991 Copyright \u00a9 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"about/license/#preamble","title":"Preamble","text":"<p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.)  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p> <p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p> <p>Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary.  To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"about/license/#terms-and-conditions-for-copying-distribution-and-modification","title":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","text":"<p>0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The \u201cProgram\u201d, below, refers to any such program or work, and a \u201cwork based on the Program\u201d means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term \u201cmodification\u201d.)  Each licensee is addressed as \u201cyou\u201d.</p> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p> <p>1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</p> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <p>2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <ul> <li>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</li> <li>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</li> <li>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License.  (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</li> </ul> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p> <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <p>3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p> <ul> <li>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</li> <li>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</li> <li>c) Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</li> </ul> <p>The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p> <p>4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> <p>5. You are not required to accept this License, since you have not signed it.  However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p> <p>6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.  You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p> <p>7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all.  For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <p>8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.</p> <p>9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and \u201cany later version\u201d, you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p> <p>10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p>"},{"location":"about/license/#no-warranty","title":"NO WARRANTY","text":"<p>11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <p>12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"about/license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program is interactive, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>Gnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w</code> and <code>show c</code> should show the appropriate parts of the General Public License.  Of course, the commands you use may be called something other than <code>show w</code> and <code>show c</code>; they could even be mouse-clicks or menu items--whatever suits your program.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary.  Here is a sample; alter the names:</p> <pre><code>Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n&lt;signature of Ty Coon&gt;, 1 April 1989\nTy Coon, President of Vice\n</code></pre> <p>This General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.</p>"},{"location":"developer/","title":"For Developers","text":"<p>This is the homepage for all developer related documentation.</p> <ul> <li>The developer guide, which describes common workflows for developers in a tutorial format. This includes instructions on how to set up your developer environment, check out the code, run it locally etc.</li> <li>The developer manual, which describes each python module and its classes, functions etc. This section is autogenerated.</li> </ul>"},{"location":"developer/documentation/overview/","title":"Working with documentation","text":"<p>Documentation is written using mkdocs.</p>"},{"location":"developer/documentation/overview/#building-documentation-pdf","title":"Building documentation PDF","text":"<p>You can build a copy of the documentation as a PDF file using the following steps:</p> <pre><code>pip install mkdocs-with-pdf\npip install mkdocs-material\npip install qrcode\nmkdocs build --config-file mkdocs-pdf.yml\nxdg-open pdfs/QGISAnimationWorkbench.pdf \n</code></pre>"},{"location":"developer/guide/","title":"Developer guide","text":"<p>In this section of the documentation, we aim to onboard developers onto the process of setting up a developer workstation, understanding the system architecture, contributing back to the project and so forth. Here is a brief overview of the content provided here:</p> <ul> <li>Architecture: Here we outline the system architecture using ER Diagrams, Software Component Diagrams etc.</li> <li>Prerequisites:  An overview of the software that needs to be installed before you can start.</li> <li>Cloning: In this section we cover how to make a local working copy on your own machine.</li> <li>IDE Setup: Here we walk through setting up your IDE.</li> <li>Building: This covers tasks related to building the application so you can test it in your browser.</li> <li>Configuration: This covers standard configuration tasks that need to be done once the site is brought online.</li> <li>Design: This section describes the visual design approach for the user interface.</li> <li>Workflows: Examples of typical workflows for adding features, fixing bugs etc.</li> <li>Testing: This section focuses on setting up end-to-end testing for the project.</li> </ul>"},{"location":"developer/guide/design/","title":"Design","text":""},{"location":"developer/guide/ide-setup/","title":"Developer Environment","text":"<p>In this section, we walk you through setting up a development environment and describe common workflows for debugging etc.</p>"},{"location":"developer/guide/ide-setup/#setup","title":"Setup","text":"<p>Fork the <code>main</code> branch into your personal repository. Clone it to your local computer. Install QGIS and the following dependencies.</p> <ul> <li>debugpy (python library)</li> <li>convert (imagemagick)</li> <li>ffmpeg</li> <li>vscode (don't use flatpak, debugging will not work with QGIS)</li> </ul> <p>Clone the repo and symlink the <code>animation_workbench</code> subfolder into your profile. Remember to change <code>&lt;profile&gt;</code> in the line below with the actual name of the profile you will be using.</p> <pre><code>git clone https://github.com/{your-personal-repo}/QGISAnimationWorkbench.git\nln -s animation_workbench ~.local/share/QGIS/QGIS3/profiles/&lt;profile&gt;/python/plugins\n</code></pre> <p>Enable the plugin in the QGIS plugin manager. You should also install the Plugin Reloader plugin so you can quickly deploy changes to your local session in QGIS as you are working.</p>"},{"location":"developer/guide/ide-setup/#debugging","title":"Debugging","text":"<p>We use the VSCode remote debugger with <code>debugpy</code> in order to carry our debugging workflows such as setting breakpoints, inspecting the application state, stepping through code etc. </p> <p>To start debugging, you need to put the plugin into developer mode.</p> <p></p> <p>Next, open the QGIS Animation Workbench git checkout (as described above), and then active the <code>Run and Debug</code> tab (1 in the image below). From the list of launchers, choose <code>Python: Remote Attach</code> and press the green run icon (2 in the image below).</p> <p></p> <p>The animation workbench will then resume normal operation, but you will be able to set breakpoints and inspect objects in CSCode. Please refer to VSCode documentation for the actual nuts and bolts of using their debugging tools.</p>"},{"location":"developer/guide/ide-setup/#packaging","title":"Packaging","text":"<p>Every time a merge is made to the main branch, a package is built automatically.</p> <pre><code>TODO\n</code></pre>"},{"location":"developer/guide/ide-setup/#run-test","title":"Run test","text":"<pre><code>TODO\n</code></pre>"},{"location":"developer/manual/","title":"Developer manual","text":"<p>Welcome to the QGIS Animation Workbench developer manual. This section of the documentation describes how to participate in the development of the application and what the various components. The manual is intended to function as a reference for the application. For narrative / workflow based tutorials, you may prefer to work through our developer guide. Here is a brief overview of the content provided here:</p> <ul> <li>: Coming soon</li> </ul>"},{"location":"user/","title":"For Users","text":"<p>This is the homepage for all user related documentation.</p> <p>The user content is divided into three sections:</p> <ul> <li>The quickstart tutorial, which aims to get you familiar with the basics of platform in around 5 minutes.</li> <li>The user guide, which describes common workflows in a tutorial format.</li> <li>The user manual, which describes each page of the user interface and what the various options on that page do.</li> </ul>"},{"location":"user/guide/","title":"Index","text":""},{"location":"user/guide/#tutorial-1-point-along-a-line","title":"Tutorial 1: Point Along A Line","text":"<p>This tutorial introduces the concept of moving a point along a line within your animated map.</p> <p>1. Download and extract the Required Tutorial Zip Folder </p> <p>2. Open the tutorial_1.qgz project file that is in the folder. When you first open it you you see something like this:</p> <p> </p> <p>3. Select the premade <code>line</code> layer (<code>1</code>), and click on the <code>Add Symbol Layer</code> (green plus symbol) button (<code>2</code>) to it.</p> <p></p> <p>Change the new <code>Symbol Layer</code> (<code>3</code>) type to marker line and then style it (<code>4</code>) so that it is more visible.</p> <p></p> <p>4. Change the <code>Symbol Layer's</code> settings so that the point is only on the <code>first vertex</code> (<code>5</code>) and and not at equidistant intervals.</p> <p>Change the offset along the line to be <code>Percentage</code> (<code>6</code>).</p> <p></p> <p>Click the <code>Dropdown Menu</code> (<code>7</code>) \u2794<code>Edit...</code> (<code>8</code>) and then add the following code snippet</p> <p></p> <pre><code>    -- Point Along Line Code Snippet\n    (@current_hover_frame/@hover_frames) * 100\n</code></pre> <p></p> <p>The snippet tells QGIS how far along the line (as a percentage of the line length) to render the point in each frame.</p> <p>5. Open the Workbench and select <code>Fixed Extent</code> (<code>9</code>).</p> <p>Click on <code>Map Canvas Extent</code> (<code>10</code>) and set the the <code>Frames</code> to 300 (<code>11</code>) (for a 10 second output at 30 frames per second).</p> <p></p> <p>6. Skip over the <code>Intro</code>, <code>Outro</code>, and <code>Soundtrack</code> tabs. In the <code>Output</code> tab, set the output format (<code>12</code>) and resolution (<code>13</code>), and set the output location's path (<code>14</code>).</p> <p></p> <p>7. Click <code>Run</code> and render your output.</p> <p></p> <p>After this tutorial you should have a better idea of how to make a point move along a line. An expansion to this example would be to make the moving point a dynamically changing marker (like the markers in tutorial 1). Go have fun!</p>"},{"location":"user/guide/#tutorial-2-basic-dynamically-changing-markers","title":"Tutorial 2: Basic Dynamically Changing Markers","text":"<p>This tutorial aims to show you the basics of creating, and animating, a static layer to use with the Animation Workbench. There are three pre-made layers to allow the main focus of the tutorial to be on the Animation Workbench and not on QGIS as a whole.</p> <p>1. Download and extract the Required Tutorial Zip Folder </p> <p>2. Open the tutorial_2.qgz project file that is in the folder. \u00a0</p> <p>3. Set the CRS of your project to WGS84/UTM zone 35S (EPSG: 32735).</p> <p> </p> <p>4. In the <code>Browser</code>, expand the tutorial_2.gpkg and add the three pre-made layers (VaalDam, SouthAfrica, and route) (<code>A</code>) to your project.</p> <p> </p> <p>5. In the <code>Layers</code> Panel, arrange the layers in the following order: <code>route</code>, <code>VaalDam</code>, <code>SouthAfrica</code>. Then right-click on the <code>VaalDam</code> layer and <code>Zoom to Layer(s)</code> (<code>B</code>)</p> <p></p> <p>Style the three layers to your preferred style. \u00a0</p> <p>6. Now create a new layer in the tutorial_2.gpkg by clicking <code>Layer</code>\u2794<code>Create Layer</code>\u2794 <code>New GeoPackage Layer...</code> (<code>C</code>).</p> <p> </p> <p>Click on the <code>Ellipsis</code> (<code>D</code>), navigate to and select the tutorial_2.gpkg, and click <code>Save</code>. Change the Table name to fish (<code>E</code>), set the Geometry type as Point (<code>F</code>), and change the CRS to match the Project CRS (<code>G</code>).</p> <p></p> <p>Click on <code>OK</code> and then click <code>Add New Layer</code> on the window that pops up. \u00a0</p> <p>7. Select the <code>fish</code> layer and then click on <code>Toggle Editing</code>\u2794<code>Add Point Feature</code> (<code>H</code>).</p> <p></p> <p>Add a few points wherever you feel they should go (Hint: This is a fish layer so adding them above the dam layer would be best). Don't worry about naming the points, just add them.</p> <p></p> <p>Save your changes by clicking on <code>Save Layer Edits</code> just next to the <code>Toggle Editing</code> button. Then stop editing the layer. \u00a0</p> <p>8. Repeat steps 6. and 7. but change the Table name to bird and add the points over the land areas.</p> <p> </p> <p>9. Select the <code>fish</code> layer and then in the <code>Layer styling</code> toolbar (<code>I</code>) change the <code>Symbol layer type</code> to <code>Raster Image Marker</code> (<code>J</code>).</p> <p></p> <p>Select the marker image by clicking the <code>Dropdown menu</code>\u2794<code>Select File...</code> (<code>K</code>) and then choosing <code>fish</code>\u2794<code>fish_0000.png</code>.</p> <p></p> <p>Click <code>Open</code> </p> <p>10. Change the marker's Size Unit to <code>Meters at Scale</code> (<code>L</code>)</p> <p></p> <p>and set the Width and Height to 1000. \u00a0</p> <p>11. Repeat Steps 9. and 10. with the <code>bird</code> layer but instead choosing <code>bird</code>\u2794<code>bird_0000.png</code> and setting the Width and Height to 3000.</p> <p> </p> <p>In <code>QGIS 3.26</code>, or later, the <code>Symbol layer type</code> can simply be selected as <code>Animated Marker</code> and Step 12. can be skipped.</p> <p>12. To animate the <code>fish</code> and <code>bird</code> layers using the <code>QGIS Expressions</code> system click the <code>Dropdown Menu</code>\u2794<code>Edit...</code> (<code>M</code>).</p> <p></p> <p>For the <code>fish</code> layer use the following expression:</p> <p></p> <pre><code>    @project_home\n    || \n    '/fish/fish_00'\n    ||\n    lpad(to_string( @frame_number % 32), 2, '0')\n    ||\n    '.png'\n</code></pre> <p>And for the <code>bird</code> layer use:</p> <p></p> <pre><code>    @project_home\n    ||\n    '/bird/bird_00'\n    || \n    lpad(to_string(@frame_number % 9), 2, '0')\n    || \n    '.png'\n</code></pre> <p>Refer to the What is the Workbench doing? section for an explanation     about what the above code snippet is doing.</p> <p>13. Open the Animation Workbench (refer to the Using the Animation Workbench section if you are unsure how to open the Workbench).</p> <p>In the <code>Animation Plan</code> tab set:</p> <ul> <li>the <code>Render Mode</code> to <code>Planar</code> (<code>N</code>),</li> <li>the <code>Animation Layer</code> to <code>route</code> (<code>O</code>) using the dropdown menu,</li> <li>the <code>Zoom Range</code> (<code>P</code>) to 1:270000 for the Minimum and 1:135000 for the Maximum,</li> <li>the <code>Frame rate per second</code> to 9 fps (<code>Q</code>),</li> <li>the <code>Travel duration</code> to 4,00 s (<code>R</code>),</li> <li>and the <code>Feature hover duration</code> to 2,00 s (<code>S</code>)</li> </ul> <p>Enable both the <code>Pan</code> and <code>Zoom</code> easings and set them to linear.</p> <p></p> <p>14. Skip past the <code>Intro</code>, <code>Outro</code>, and <code>Soundtrack</code> tabs to the <code>Output</code> tab. Set the <code>Output Format</code> as <code>Animated Gif</code> (<code>T</code>) and the <code>Output Resolution</code> to <code>720p (1280x720)</code> (<code>U</code>). The <code>Output Resolution</code> can be set as any of the three choices but was set at <code>720</code> for this tutorial for the sake of speed. Set the output location to one you can find easily (<code>V</code>)</p> <p> </p> <p>15. Click <code>Run</code> and watch what the Workbench is doing in the <code>Progress</code> tab. Once the Workbench is finished running, you should end up with an output similar to this:</p> <p></p> <p>After this tutorial you should have a better understanding of how to create a point layer in your project and then to change the <code>Single Symbol</code> markers into stationary animated markers. A key focus is the idea that you can tell versions of <code>QGIS</code> before <code>3.26</code> to dynamically change markers using short code snippets. Versions of <code>QGIS</code> post <code>3.26</code> allow a user to simply use the <code>Animated Marker</code> feature without editing an expression.</p>"},{"location":"user/guide/#tutorial-3-flying-points","title":"Tutorial 3: Flying Points","text":"<p>This tutorial aims to show you how add a flying point animation to points on your map using built-in QGIS functionalities (The geometry generator line) and introduced variables from the workbench.</p> <p>1. Download and extract the Required Tutorial Zip Folder </p> <p>2. Open the tutorial_3.qgz project file. When you first open the project file you should be greeted with something like this:</p> <p> </p> <p>3. Create a new point layer in a new geopackage by clicking <code>Layer</code>\u2794<code>Create Layer</code>\u2794  <code>New GeoPackage Layer...</code>. Click on the <code>Ellipsis</code> (three dots) next to the Database textbox and navigate to the folder that the tutorial_3.qgz file is located in. Type the File name \"tutorial_3\" (<code>1</code>) and ensure the file will be saved as a <code>GeoPackage</code> (<code>2</code>) and click <code>Save</code> (<code>3</code>).</p> <p> </p> <p>Change the Table name to flying_points (<code>4</code>), set the Geometry type as Point (<code>5</code>) and change the CRS to match the Project CRS (<code>6</code>).</p> <p></p> <p>Click <code>OK</code> (<code>7</code>) \u00a0</p> <p>4. Click on <code>Toggle Editing</code>\u2794<code>Add Point Feature</code> (<code>8</code>).</p> <p> </p> <p>And randomly add points to your map. Depending on your computer's capabilites, you can add more, or fewer, points than the example below.</p> <p> </p> <p>Save your Layer Edits and toggle off the Editing tool. \u00a0</p> <p>5. Style the points layer.</p> <p>Select the <code>flying_points</code> (<code>9</code>) layer and in the <code>Layer Styling</code> toolbar click on the <code>Add Symbol Layer</code> (green plus symbol) button (<code>10</code>).</p> <p> </p> <p>Select the top <code>Simple Marker</code> (<code>11</code>) and change its Symbol layer type to <code>Geometry Generator</code> (<code>12</code>)</p> <p></p> <p>and then set the Geometry type to <code>LineString / MultiLineString</code> (<code>13</code>).</p> <p> </p> <p>Change the line's Symbol layer type to <code>Marker Line</code> (<code>14</code>).</p> <p> </p> <p>Add a second <code>Simple marker</code> to the marker line so that you end up with something like this:</p> <p> </p> <p>Style the various <code>Simple Markers</code> to your preferred look.</p> <p> </p> <p>6. Select the <code>Geometry Generator</code> symbol layer (<code>15</code>) and add this code to it:</p> <pre><code>    wave_randomized(\n    make_line(\n    $geometry, geometry(@hover_feature)), \n    100, 1000, 1000, 10000, 1)\n</code></pre> <p> </p> <p>More information about what changing the numbers will affect can be found in the QGIS expressions editor. \u00a0</p> <p>7. A few options need to be changed in the <code>Marker Line</code> symbol layer (<code>16</code>): The Marker placement needs to be set to <code>On first vertex</code> (<code>17</code>) and, the Offset along line needs to be changed to <code>Percentage</code> (<code>18</code>). The click the <code>Dropdown menu</code> next to Offset along line and select <code>Edit...</code> (<code>19</code>).</p> <p> </p> <p>In the <code>Expression String Builder</code> add the following code snippet:</p> <pre><code>    100 - to_int((@current_hover_frame / @hover_frames) * 100 )\n</code></pre> <p> </p> <p>Click <code>OK</code> </p> <p>8. Select the first <code>Simple Marker</code> symbol layer (<code>20</code>) in the <code>Marker Line</code> symbol layer. Scroll down to Offset and click on the <code>Dropdown Menu</code>\u2794<code>Edit..</code> (<code>21</code>).</p> <p> </p> <p>In the <code>Expression String Builder</code> add the following code snippet:</p> <pre><code>    -- Taken from https://spicyyoghurt.com/tools/easing-functions\n    --    t = Time - Amount of time that has passed since the beginning of the animation. Usually starts at 0 and is slowly increased using a game loop or other update function.\n    --    b = Beginning value - The starting point of the animation. Usually it's a static value, you can start at 0 for example.\n    --    c = Change in value - The amount of change needed to go from starting point to end point. It's also usually a static value.\n    --    d = Duration - Amount of time the animation will take. Usually a static value aswell.\n    -- Sinusoidal\n    -- -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\n    -- Use with the animation in static mode\n    if(@hover_feature_id != $id,\n    array(\n        (-@hover_frames / 2) * (cos( (pi() * @frame_number / @hover_frames ) - 1)) ,\n        (-@hover_frames / 2) * (sin( (pi() * @frame_number / @hover_frames ) - 1)) \n        ),\n        array (0,0))\n</code></pre> <p> </p> <p>Click <code>OK</code> </p> <p>9. Open the <code>Animation Workbench</code> (<code>22</code>)</p> <p> </p> <p>10. Set up the <code>Animation Plan</code> with:</p> <ul> <li>the <code>Render Mode</code> to <code>Planar</code> (<code>23</code>),</li> <li>the <code>Animation Layer</code> to <code>flying_points</code> (<code>24</code>) using the dropdown menu,</li> <li>the <code>Zoom Range</code> (<code>25</code>) to 1:22000000 for the Minimum and 1:11000000 for the     Maximum,</li> <li>the <code>Frame rate per second</code> to 9 fps (<code>26</code>),</li> <li>the <code>Travel duration</code> to 2,00 s (<code>27</code>),</li> <li>the <code>Feature hover duration</code> to 2,00 s (<code>28</code>),</li> <li>and the <code>Zoom Easing</code> as InCirc (<code>29</code>)</li> </ul> <p> </p> <p>With a decently specced computer you can up the fps and get the points to fly faster in your output. \u00a0</p> <p>11. Add license-free media to the <code>Intro</code>, <code>Outro</code>, and <code>Soundtrack</code>.</p> <p>Make sure your <code>Soundtrack</code> is as long as, or longer than, your final animation will be (including the <code>Intro</code>, <code>Animation</code>, and <code>Outro</code>).</p> <p> </p> <p>12. Set the <code>Output Format</code> as <code>Movie (MP4)</code> (<code>30</code>) and the <code>Output Resolution</code> to <code>1080 (1920x1080)</code> (<code>31</code>). The <code>Output Resolution</code> can be set as any of the three choices but was set at <code>1080</code> for this tutorial for the sake of speed. Set the output location (<code>32</code>) to one you can easily locate.</p> <p> </p> <p>13. Click <code>Run</code> and get an output. The GIF below is the visual output of the tutorial if you followed step-by-step and set the parameters to exactly what was stated.</p> <p> </p> <p>The link to a more complex output (with an <code>Intro</code>, an <code>Outro</code>, and a <code>Soundtrack</code>) can be found here</p> <p> </p> <p>After this tutorial you should have a better idea of how you can use a mixture of built-in QGIS functionalites and the workbench's introduced variables to generate interesting outputs.</p>"},{"location":"user/guide/#tutorial-4-spinning-globe","title":"Tutorial 4: Spinning Globe","text":"<p>Given a global point layer and countries layer like this:</p> <p></p> <p>You can create a nice spinning globe effect like this:</p> <p></p> <p>I set up the animation workbench like this:</p> <p></p> <p>For the above animated GIF, I compressed it using imagemagick like this:</p> <pre><code>convert globe.gif -coalesce -resize 700x525 -fuzz 2% +dither -layers Optimize +map globe_small.gif\n</code></pre> <p>This is a handy technique if you want to generate small file size animations.</p> <p>For the points I made a red marker using a quarter circle that spins around the points like this:</p> <p></p> <p>The rotation field expression is this:</p> <pre><code>if (@id = @hover_feature_id, \n    0-((1440 * (@current_hover_frame/@hover_frames)) % 360),\n    0)\n</code></pre> <p>This will spin around 4 times during the hover cycle.</p> <p>For the ocean (AOI in the layers list), I generated a grid of 1 degree cells covering the earth. You need to do it as smaller polygons instead of one large polygon because QGIS will run into issues reprojecting a single polygon whose edges lie on the date line.</p> <p>Here is how the final video came out:</p>"},{"location":"user/guide/tutorial1/","title":"1 Points on a Line","text":""},{"location":"user/guide/tutorial1/#tutorial-1-point-along-a-line","title":"Tutorial 1: Point Along A Line","text":"<p>This tutorial introduces the concept of moving a point along a line within your animated map.</p> <p>1. Download and extract the Required Tutorial Zip Folder </p> <p>2. Open the tutorial_1.qgz project file that is in the folder. When you first open it you you see something like this:</p> <p> </p> <p>3. Select the premade <code>line</code> layer (<code>1</code>), and click on the <code>Add Symbol Layer</code> (green plus symbol) button (<code>2</code>) to it.</p> <p></p> <p>Change the new <code>Symbol Layer</code> (<code>3</code>) type to marker line and then style it (<code>4</code>) so that it is more visible.</p> <p></p> <p>4. Change the <code>Symbol Layer's</code> settings so that the point is only on the <code>first vertex</code> (<code>5</code>) and and not at equidistant intervals.</p> <p>Change the offset along the line to be <code>Percentage</code> (<code>6</code>).</p> <p></p> <p>Click the <code>Dropdown Menu</code> (<code>7</code>) \u2794<code>Edit...</code> (<code>8</code>) and then add the following code snippet</p> <p></p> <pre><code>    -- Point Along Line Code Snippet\n    (@current_hover_frame/@hover_frames) * 100\n</code></pre> <p></p> <p>The snippet tells QGIS how far along the line (as a percentage of the line length) to render the point in each frame.</p> <p>5. Open the Workbench and select <code>Fixed Extent</code> (<code>9</code>).</p> <p>Click on <code>Map Canvas Extent</code> (<code>10</code>) and set the the <code>Frames</code> to 300 (<code>11</code>) (for a 10 second output at 30 frames per second).</p> <p></p> <p>6. Skip over the <code>Intro</code>, <code>Outro</code>, and <code>Soundtrack</code> tabs. In the <code>Output</code> tab, set the output format (<code>12</code>) and resolution (<code>13</code>), and set the output location's path (<code>14</code>).</p> <p></p> <p>7. Click <code>Run</code> and render your output.</p> <p></p> <p>After this tutorial you should have a better idea of how to make a point move along a line. An expansion to this example would be to make the moving point a dynamically changing marker (like the markers in tutorial 1). Go have fun!</p>"},{"location":"user/guide/tutorial2/","title":"2 Dynamic Markers","text":""},{"location":"user/guide/tutorial2/#tutorial-2-basic-dynamically-changing-markers","title":"Tutorial 2: Basic Dynamically Changing Markers","text":"<p>This tutorial aims to show you the basics of creating, and animating, a static layer to use with the Animation Workbench. There are three pre-made layers to allow the main focus of the tutorial to be on the Animation Workbench and not on QGIS as a whole.</p> <p>1. Download and extract the Required Tutorial Zip Folder </p> <p>2. Open the tutorial_2.qgz project file that is in the folder. \u00a0</p> <p>3. Set the CRS of your project to WGS84/UTM zone 35S (EPSG: 32735).</p> <p> </p> <p>4. In the <code>Browser</code>, expand the tutorial_2.gpkg and add the three pre-made layers (VaalDam, SouthAfrica, and route) (<code>A</code>) to your project.</p> <p> </p> <p>5. In the <code>Layers</code> Panel, arrange the layers in the following order: <code>route</code>, <code>VaalDam</code>, <code>SouthAfrica</code>. Then right-click on the <code>VaalDam</code> layer and <code>Zoom to Layer(s)</code> (<code>B</code>)</p> <p></p> <p>Style the three layers to your preferred style. \u00a0</p> <p>6. Now create a new layer in the tutorial_2.gpkg by clicking <code>Layer</code>\u2794<code>Create Layer</code>\u2794 <code>New GeoPackage Layer...</code> (<code>C</code>).</p> <p> </p> <p>Click on the <code>Ellipsis</code> (<code>D</code>), navigate to and select the tutorial_2.gpkg, and click <code>Save</code>. Change the Table name to fish (<code>E</code>), set the Geometry type as Point (<code>F</code>), and change the CRS to match the Project CRS (<code>G</code>).</p> <p></p> <p>Click on <code>OK</code> and then click <code>Add New Layer</code> on the window that pops up. \u00a0</p> <p>7. Select the <code>fish</code> layer and then click on <code>Toggle Editing</code>\u2794<code>Add Point Feature</code> (<code>H</code>).</p> <p></p> <p>Add a few points wherever you feel they should go (Hint: This is a fish layer so adding them above the dam layer would be best). Don't worry about naming the points, just add them.</p> <p></p> <p>Save your changes by clicking on <code>Save Layer Edits</code> just next to the <code>Toggle Editing</code> button. Then stop editing the layer. \u00a0</p> <p>8. Repeat steps 6. and 7. but change the Table name to bird and add the points over the land areas.</p> <p> </p> <p>9. Select the <code>fish</code> layer and then in the <code>Layer styling</code> toolbar (<code>I</code>) change the <code>Symbol layer type</code> to <code>Raster Image Marker</code> (<code>J</code>).</p> <p></p> <p>Select the marker image by clicking the <code>Dropdown menu</code>\u2794<code>Select File...</code> (<code>K</code>) and then choosing <code>fish</code>\u2794<code>fish_0000.png</code>.</p> <p></p> <p>Click <code>Open</code> </p> <p>10. Change the marker's Size Unit to <code>Meters at Scale</code> (<code>L</code>)</p> <p></p> <p>and set the Width and Height to 1000. \u00a0</p> <p>11. Repeat Steps 9. and 10. with the <code>bird</code> layer but instead choosing <code>bird</code>\u2794<code>bird_0000.png</code> and setting the Width and Height to 3000.</p> <p> </p> <p>In <code>QGIS 3.26</code>, or later, the <code>Symbol layer type</code> can simply be selected as <code>Animated Marker</code> and Step 12. can be skipped.</p> <p>12. To animate the <code>fish</code> and <code>bird</code> layers using the <code>QGIS Expressions</code> system click the <code>Dropdown Menu</code>\u2794<code>Edit...</code> (<code>M</code>).</p> <p></p> <p>For the <code>fish</code> layer use the following expression:</p> <p></p> <pre><code>    @project_home\n    || \n    '/fish/fish_00'\n    ||\n    lpad(to_string( @frame_number % 32), 2, '0')\n    ||\n    '.png'\n</code></pre> <p>And for the <code>bird</code> layer use:</p> <p></p> <pre><code>    @project_home\n    ||\n    '/bird/bird_00'\n    || \n    lpad(to_string(@frame_number % 9), 2, '0')\n    || \n    '.png'\n</code></pre> <p>Refer to the What is the Workbench doing? section for an explanation     about what the above code snippet is doing.</p> <p>13. Open the Animation Workbench (refer to the Using the Animation Workbench section if you are unsure how to open the Workbench).</p> <p>In the <code>Animation Plan</code> tab set:</p> <ul> <li>the <code>Render Mode</code> to <code>Planar</code> (<code>N</code>),</li> <li>the <code>Animation Layer</code> to <code>route</code> (<code>O</code>) using the dropdown menu,</li> <li>the <code>Zoom Range</code> (<code>P</code>) to 1:270000 for the Minimum and 1:135000 for the Maximum,</li> <li>the <code>Frame rate per second</code> to 9 fps (<code>Q</code>),</li> <li>the <code>Travel duration</code> to 4,00 s (<code>R</code>),</li> <li>and the <code>Feature hover duration</code> to 2,00 s (<code>S</code>)</li> </ul> <p>Enable both the <code>Pan</code> and <code>Zoom</code> easings and set them to linear.</p> <p></p> <p>14. Skip past the <code>Intro</code>, <code>Outro</code>, and <code>Soundtrack</code> tabs to the <code>Output</code> tab. Set the <code>Output Format</code> as <code>Animated Gif</code> (<code>T</code>) and the <code>Output Resolution</code> to <code>720p (1280x720)</code> (<code>U</code>). The <code>Output Resolution</code> can be set as any of the three choices but was set at <code>720</code> for this tutorial for the sake of speed. Set the output location to one you can find easily (<code>V</code>)</p> <p> </p> <p>15. Click <code>Run</code> and watch what the Workbench is doing in the <code>Progress</code> tab. Once the Workbench is finished running, you should end up with an output similar to this:</p> <p></p> <p>After this tutorial you should have a better understanding of how to create a point layer in your project and then to change the <code>Single Symbol</code> markers into stationary animated markers. A key focus is the idea that you can tell versions of <code>QGIS</code> before <code>3.26</code> to dynamically change markers using short code snippets. Versions of <code>QGIS</code> post <code>3.26</code> allow a user to simply use the <code>Animated Marker</code> feature without editing an expression.</p>"},{"location":"user/guide/tutorial3/","title":"3 Flying Points","text":""},{"location":"user/guide/tutorial3/#tutorial-3-flying-points","title":"Tutorial 3: Flying Points","text":"<p>This tutorial aims to show you how add a flying point animation to points on your map using built-in QGIS functionalities (The geometry generator line) and introduced variables from the workbench.</p> <p>1. Download and extract the Required Tutorial Zip Folder </p> <p>2. Open the tutorial_3.qgz project file. When you first open the project file you should be greeted with something like this:</p> <p> </p> <p>3. Create a new point layer in a new geopackage by clicking <code>Layer</code>\u2794<code>Create Layer</code>\u2794  <code>New GeoPackage Layer...</code>. Click on the <code>Ellipsis</code> (three dots) next to the Database textbox and navigate to the folder that the tutorial_3.qgz file is located in. Type the File name \"tutorial_3\" (<code>1</code>) and ensure the file will be saved as a <code>GeoPackage</code> (<code>2</code>) and click <code>Save</code> (<code>3</code>).</p> <p> </p> <p>Change the Table name to flying_points (<code>4</code>), set the Geometry type as Point (<code>5</code>) and change the CRS to match the Project CRS (<code>6</code>).</p> <p></p> <p>Click <code>OK</code> (<code>7</code>) \u00a0</p> <p>4. Click on <code>Toggle Editing</code>\u2794<code>Add Point Feature</code> (<code>8</code>).</p> <p> </p> <p>And randomly add points to your map. Depending on your computer's capabilites, you can add more, or fewer, points than the example below.</p> <p> </p> <p>Save your Layer Edits and toggle off the Editing tool. \u00a0</p> <p>5. Style the points layer.</p> <p>Select the <code>flying_points</code> (<code>9</code>) layer and in the <code>Layer Styling</code> toolbar click on the <code>Add Symbol Layer</code> (green plus symbol) button (<code>10</code>).</p> <p> </p> <p>Select the top <code>Simple Marker</code> (<code>11</code>) and change its Symbol layer type to <code>Geometry Generator</code> (<code>12</code>)</p> <p></p> <p>and then set the Geometry type to <code>LineString / MultiLineString</code> (<code>13</code>).</p> <p> </p> <p>Change the line's Symbol layer type to <code>Marker Line</code> (<code>14</code>).</p> <p> </p> <p>Add a second <code>Simple marker</code> to the marker line so that you end up with something like this:</p> <p> </p> <p>Style the various <code>Simple Markers</code> to your preferred look.</p> <p> </p> <p>6. Select the <code>Geometry Generator</code> symbol layer (<code>15</code>) and add this code to it:</p> <pre><code>    wave_randomized(\n    make_line(\n    $geometry, geometry(@hover_feature)), \n    100, 1000, 1000, 10000, 1)\n</code></pre> <p> </p> <p>More information about what changing the numbers will affect can be found in the QGIS expressions editor. \u00a0</p> <p>7. A few options need to be changed in the <code>Marker Line</code> symbol layer (<code>16</code>): The Marker placement needs to be set to <code>On first vertex</code> (<code>17</code>) and, the Offset along line needs to be changed to <code>Percentage</code> (<code>18</code>). The click the <code>Dropdown menu</code> next to Offset along line and select <code>Edit...</code> (<code>19</code>).</p> <p> </p> <p>In the <code>Expression String Builder</code> add the following code snippet:</p> <pre><code>    100 - to_int((@current_hover_frame / @hover_frames) * 100 )\n</code></pre> <p> </p> <p>Click <code>OK</code> </p> <p>8. Select the first <code>Simple Marker</code> symbol layer (<code>20</code>) in the <code>Marker Line</code> symbol layer. Scroll down to Offset and click on the <code>Dropdown Menu</code>\u2794<code>Edit..</code> (<code>21</code>).</p> <p> </p> <p>In the <code>Expression String Builder</code> add the following code snippet:</p> <pre><code>    -- Taken from https://spicyyoghurt.com/tools/easing-functions\n    --    t = Time - Amount of time that has passed since the beginning of the animation. Usually starts at 0 and is slowly increased using a game loop or other update function.\n    --    b = Beginning value - The starting point of the animation. Usually it's a static value, you can start at 0 for example.\n    --    c = Change in value - The amount of change needed to go from starting point to end point. It's also usually a static value.\n    --    d = Duration - Amount of time the animation will take. Usually a static value aswell.\n    -- Sinusoidal\n    -- -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\n    -- Use with the animation in static mode\n    if(@hover_feature_id != $id,\n    array(\n        (-@hover_frames / 2) * (cos( (pi() * @frame_number / @hover_frames ) - 1)) ,\n        (-@hover_frames / 2) * (sin( (pi() * @frame_number / @hover_frames ) - 1)) \n        ),\n        array (0,0))\n</code></pre> <p> </p> <p>Click <code>OK</code> </p> <p>9. Open the <code>Animation Workbench</code> (<code>22</code>)</p> <p> </p> <p>10. Set up the <code>Animation Plan</code> with:</p> <ul> <li>the <code>Render Mode</code> to <code>Planar</code> (<code>23</code>),</li> <li>the <code>Animation Layer</code> to <code>flying_points</code> (<code>24</code>) using the dropdown menu,</li> <li>the <code>Zoom Range</code> (<code>25</code>) to 1:22000000 for the Minimum and 1:11000000 for the     Maximum,</li> <li>the <code>Frame rate per second</code> to 9 fps (<code>26</code>),</li> <li>the <code>Travel duration</code> to 2,00 s (<code>27</code>),</li> <li>the <code>Feature hover duration</code> to 2,00 s (<code>28</code>),</li> <li>and the <code>Zoom Easing</code> as InCirc (<code>29</code>)</li> </ul> <p> </p> <p>With a decently specced computer you can up the fps and get the points to fly faster in your output. \u00a0</p> <p>11. Add license-free media to the <code>Intro</code>, <code>Outro</code>, and <code>Soundtrack</code>.</p> <p>Make sure your <code>Soundtrack</code> is as long as, or longer than, your final animation will be (including the <code>Intro</code>, <code>Animation</code>, and <code>Outro</code>).</p> <p> </p> <p>12. Set the <code>Output Format</code> as <code>Movie (MP4)</code> (<code>30</code>) and the <code>Output Resolution</code> to <code>1080 (1920x1080)</code> (<code>31</code>). The <code>Output Resolution</code> can be set as any of the three choices but was set at <code>1080</code> for this tutorial for the sake of speed. Set the output location (<code>32</code>) to one you can easily locate.</p> <p> </p> <p>13. Click <code>Run</code> and get an output. The GIF below is the visual output of the tutorial if you followed step-by-step and set the parameters to exactly what was stated.</p> <p> </p> <p>The link to a more complex output (with an <code>Intro</code>, an <code>Outro</code>, and a <code>Soundtrack</code>) can be found here</p> <p> </p> <p>After this tutorial you should have a better idea of how you can use a mixture of built-in QGIS functionalites and the workbench's introduced variables to generate interesting outputs.</p>"},{"location":"user/guide/tutorial4/","title":"4 Spinning Globe","text":""},{"location":"user/guide/tutorial4/#tutorial-4-spinning-globe","title":"Tutorial 4: Spinning Globe","text":"<p>Given a global point layer and countries layer like this:</p> <p></p> <p>You can create a nice spinning globe effect like this:</p> <p></p> <p>I set up the animation workbench like this:</p> <p></p> <p>For the above animated GIF, I compressed it using imagemagick like this:</p> <pre><code>convert globe.gif -coalesce -resize 700x525 -fuzz 2% +dither -layers Optimize +map globe_small.gif\n</code></pre> <p>This is a handy technique if you want to generate small file size animations.</p> <p>For the points I made a red marker using a quarter circle that spins around the points like this:</p> <p></p> <p>The rotation field expression is this:</p> <pre><code>if (@id = @hover_feature_id, \n    0-((1440 * (@current_hover_frame/@hover_frames)) % 360),\n    0)\n</code></pre> <p>This will spin around 4 times during the hover cycle.</p> <p>For the ocean (AOI in the layers list), I generated a grid of 1 degree cells covering the earth. You need to do it as smaller polygons instead of one large polygon because QGIS will run into issues reprojecting a single polygon whose edges lie on the date line.</p> <p>Here is how the final video came out:</p>"},{"location":"user/guide/tutorial5/","title":"Tutorial 5: Planar Map Animation","text":"<p>Given a global point layer and countries layer like this:</p> <p></p> <p>You can create a nice planar map animation effect like this:</p> <p></p> <p>In planar mode, we do not pan and zoom the map from feature to feature. Rather, the map zoom stays constant and the variables for </p> <ul> <li>current_hover_frame</li> <li>hover_frames</li> <li>hover_feature_id</li> </ul> <p>are updated as we iterate over the features of your animation layer. In this example project I duplicated the animation point layer twice. The first (lower) copy is used to 'drive' the animation, whilst the second (upper) layer shows only the feature currently being hovered over, with animation effects applied to that feature.</p> <p>I set up the animation workbench like this:</p> <p></p> <p>For the above animated GIF, I compressed it using imagemagick like this:</p> <pre><code>convert globe.gif -coalesce -resize 700x525 -fuzz 2% +dither -layers Optimize +map globe_small.gif\n</code></pre> <p>This is a handy technique if you want to generate small file size animations.</p>"},{"location":"user/guide/tutorial5/#expressions-used","title":"Expressions Used","text":""},{"location":"user/guide/tutorial5/#copyright-decoration","title":"Copyright Decoration","text":"<p>Firstly for debugging, we use the following copyright label in View \u21d2 Decorations \u21d2 Copyright Label. You can use the checkbox in the Copyright configuration dialog to toggle this on and off. This will help you while debugging / tweaking your animations. When you are ready to render your final product, simply turn it off before rendering.</p> <pre><code>[%\n' \\nRotation:' ||  to_string( 0-((1440 * (@current_hover_frame/@hover_frames)) % 360)) ||\n'\\nFeature Variables:' ||\n' \\n------------------------' ||\n' \\nPrevious Feature ' || to_string(coalesce(attribute(@previous_feature, 'name'), '-'))  ||\n' \\nPrevious Feature ID ' || to_string(coalesce(@previous_feature_id, '-'))  ||\n' \\n' ||\n' \\nNext Feature ' || to_string(coalesce(attribute(@next_feature, 'name'), '-'))  ||\n' \\nNext Feature ID ' || to_string(coalesce(@next_feature_id, '-'))  ||\n' \\n' ||\n' \\nHover Feature ' || to_string(coalesce(attribute(@hover_feature, 'name'), '-'))  ||\n' \\nHover Feature ID ' || to_string(coalesce(@hover_feature_id, '-'))  ||\n' \\n' ||\n' \\nFrom Feature ' || to_string(coalesce(attribute(@from_feature, 'name'), '-'))  ||\n' \\nFrom Feature ID ' || to_string(coalesce(@from_feature_id, '-'))  ||\n' \\n' ||\n' \\nTo Feature ' || to_string(coalesce(attribute(@to_feature, 'name'), '-'))  ||\n' \\nTo Feature ID ' || to_string(coalesce(@to_feature_id, '-'))  ||\n' \\n' ||\n' \\nTotal Hover Frames ' || to_string(coalesce(@hover_frames, 0))  ||\n' \\nCurrent Hover Frame ' || to_string(coalesce(@current_hover_frame, 0))  ||\n' \\nTotal Travel Frames ' || to_string(coalesce(@travel_frames, 0))  ||\n' \\nCurrent Travel Frame ' || to_string(coalesce(@current_travel_frame, 0))  ||\n' \\nTotal Frame Count ' || to_string(coalesce(@total_frame_count, 0))  ||\n' \\nFrame Number ' || to_string(coalesce(@frame_number, 0))  ||\n' \\nFrame Rate ' || to_string(coalesce(@frame_rate, 0))  ||\n' \\nwith Current Animation Action: ' || @current_animation_action ||\n' \\nTo Direction ' ||  coalesce(format_number(degrees(azimuth( geometry(@hover_feature), geometry(@previous_feature) ) ) ), 0) || \n' \\nFrom Direction ' ||  coalesce(format_number(degrees( azimuth( geometry(@hover_feature), geometry(@next_feature) ) ) ), 0)%]\n</code></pre>"},{"location":"user/guide/tutorial5/#symbol-rotation","title":"Symbol Rotation","text":"<p>For the points I made a red marker using a quarter circle that spins around the points like this:</p> <p></p> <p>The first line of the listing from the previous section  gives you a hint about how we can vary the rotation of a symbol depending on how far through the animation sequence we are. With the addition of an <code>if</code> clause, we can apply this rotation only to features that are being hovered over during the planar animation.</p> <pre><code>if (\n  @id = @hover_feature_id, \n  0-((1440 * (@current_hover_frame/@hover_frames)) % 360), \n  0)\n</code></pre> <p>This <code>if</code> clause has the effect of excluding calculation for any feature that is not the current hover feature.</p> <p>This will spin around 4 times during the hover cycle. This is because four rotations are <code>4 x 360 = 1440</code>. We calculate the percentage of completion for the current hover frame (<code>@current_hover_frame/@hover_frames</code>) and then multiply our rotation product by the current completion percentage. Lastly we calculate the modulus of this (<code>% 360</code>) to compute how far along we are in the current rotation. More advanced users could substitute 1440 with a project variable so that it is easy to change the number of desired rotations in a single place.</p>"},{"location":"user/guide/tutorial5/#symbol-size","title":"Symbol Size","text":"<p>The rotating symbol layer and the other symbol layers in our animation layer are similarly hidden if the feature being rendered is not the <code>hover_feature_id</code> using an expression like this:</p> <pre><code>if ( @id = @hover_feature_id,  10, 0)\n</code></pre> <p>This has the effect of setting the symbol size to 0 if it is not the feature we are focussing on.</p>"},{"location":"user/guide/tutorial5/#other-planar-experiments","title":"Other Planar Experiments","text":"<p>With the basic concepts of working with planar animations covered above, you can do other interesting things.</p>"},{"location":"user/guide/tutorial5/#generate-a-line","title":"Generate a line","text":"<p>In this example, we can generate a line using the Geometry Generator function in QGIS. The line will start from the previous point, extend through the current point and terminate and the next point.</p> <p></p> <pre><code>if ( \n  $id = @hover_feature_id,\n   make_line(\n    geometry(@previous_feature),\n    geometry(@hover_feature),\n    geometry(@next_feature)\n  ),\n  $geometry)\n</code></pre> <p>We wrap it in an if clause again so that the line is not rendered if the current feature being rendered is not the same as the current animation feature.</p> <p>There may be some edge cases where there is no previous or next feature. This example does not try to deal with these cases but you could easily add some logic that checks if each of the three components making up the line is null or not.</p>"},{"location":"user/guide/tutorial5/#generate-a-curve","title":"Generate a curve","text":"<p>We can extend the above example by creating a curve rather than a line, for a more natural looking connection between the hover feature and its previous and following feature.</p> <p></p> <pre><code>if ( \n  $id = @hover_feature_id,\n   smooth(\n    make_line(\n      geometry(@previous_feature),\n      geometry(@hover_feature),\n      geometry(@next_feature)\n    ),\n    iterations:=1,\n    offset:=0.2,\n    min_length:=-1,\n    max_angle:=180),\n  $geometry)\n</code></pre> <p>If you increase the number of iterations, you can achieve a more and more smoothed out line, at the expense of processing time.</p> <p></p> <pre><code>if ( \n  $id = @hover_feature_id,\n   smooth(\n    make_line(\n      geometry(@previous_feature),\n      geometry(@hover_feature),\n      geometry(@next_feature)\n    ),\n    iterations:=5,\n    offset:=0.2,\n    min_length:=-1,\n    max_angle:=180),\n  $geometry)\n</code></pre>"},{"location":"user/guide/tutorial5/#subtring-the-line","title":"Subtring the Line","text":"<p>As a much more advanced example, you can extract a substring of the smoothed line that connects the previous, current and next features. Don't get put off by the <code>with_variable</code> elements - they just allow us to re-use calculations in our expression.</p> <p>First, let's start with extracting the first half of the smoothed line:</p> <p></p> <pre><code>if ( \n    $id = @hover_feature_id,\n    with_variable(\n        'smoothed_line',\n        smooth(\n          make_line(\n              geometry(@previous_feature),\n                geometry(@hover_feature),\n                geometry(@next_feature)\n          ),\n      iterations:=5,\n      offset:=0.2,\n      min_length:=-1,\n      max_angle:=180),\n          with_variable(\n              'line_length',\n          length(@smoothed_line),\n          line_substring(@smoothed_line, 0, @line_length / 2 ))),\n  $geometry)\n</code></pre>"},{"location":"user/guide/tutorial5/#animating-the-substring","title":"Animating the substring","text":"<p>If we follow the same approach as above, but vary the start and length of the line clip, we can create some cool line animation effects.</p> <p></p> <pre><code>if ( \n    $id = @hover_feature_id,\n    with_variable(\n        'smoothed_line',\n        smooth(\n          make_line(\n              geometry(@previous_feature),\n                geometry(@hover_feature),\n                geometry(@next_feature)\n          ),\n      iterations:=5,\n      offset:=0.2,\n      min_length:=-1,\n      max_angle:=180),\n          with_variable(\n              'line_length',\n          length(@smoothed_line),\n          line_substring(\n                    @smoothed_line, \n                    @line_length * (@current_hover_frame/@hover_frames), \n                    @line_length ))),\n\n  $geometry)\n\n</code></pre>"},{"location":"user/guide/tutorial5/#final-render","title":"Final Render","text":"<p>There are still a few details that would need to be taken care of to reach a final solution - in particular taking care of datelines and the like. But here is a little example of what we managed to make thus far (without any debugging text).</p> <p></p>"},{"location":"user/manual/","title":"User manual","text":"<p>Welcome to the QGIS Animation Workbench user manual. This section of the documentation describes the application and what the various components of each dialog do. The manual is intended to function as a reference for the application. For narrative / workflow based tutorials, you may prefer to work through our user guide. Here is a brief overview of the content provided here:</p> <ul> <li>: This section describes how to set up a project ready for use in creating an animation.</li> <li>: This section describes the different elements of the main workbench UI.</li> <li>: This section explains how the animation workbench functions internally.  </li> <li>:  Here we provide various snippets as examples of how you can achieve different effects using the workbench.</li> <li>: This is an exhaustive list of all of the variables exposed by the animation workbench.  </li> <li>: Still have questions? Here are some answers to common questions.</li> </ul>"},{"location":"user/manual/faq/","title":"Frequently Asked Questions","text":""},{"location":"user/manual/faq/#can-i-add-any-image-to-the-intro-or-outro","title":"Can I add any image to the intro or outro?","text":"<p>As long as you can provide the proper attribution for an image you can use it in your project.</p>"},{"location":"user/manual/faq/#i-have-an-older-less-powerful-computer-will-it-handle-running-this-workbench","title":"I have an older, less powerful, computer, will it handle running this workbench?","text":"<p>If you open the standard QGIS settings dialog and select the Animation Workbench options you can follow the advice with regards to lowering the number of threads allowed during rendering to help you computer cope. Rendering shorter movies or GIFs (i.e. fewer frames) will also help. Below is an example of running a job with 9000 frames at 60fps and 999 frames per feature</p> <p></p> <p>And the subsequent CPU load during processing:</p> <p></p> <p>After processing:</p> <p></p> <p>And here is the resulting video:</p> <p>https://youtu.be/1quc3xPdJsU</p>"},{"location":"user/manual/faq/#i-get-an-error-when-rendering-because-of-my-intro-outro-images","title":"I get an error when rendering because of my intro / outro images","text":"<p>Currently your filenames should not contain spaces or special characters </p> <pre><code>.(, ), [, ], {, }, &lt;, &gt;, /, \\, :, *, ?, |, \", &amp;, etc.).\n</code></pre>"},{"location":"user/manual/faq/#can-i-use-a-movie-as-the-intro-outro-media","title":"Can I use a movie as the intro / outro media?","text":"<p>This is planned but not yet implemented. Tim - check.</p>"},{"location":"user/manual/faq/#can-i-pay-you-to-add-some-features","title":"Can I pay you to add some features?","text":"<p>This is a fun / hobby project, currently we want other contributors who also want to have a fun experience with building this plugin and contribute in-kind efforts to the project. Both Kartoza and North-Road offer commercial development services but not for this plugin which is a intended to provide an experimental, no-pressure space for us to work on something fun for QGIS.</p>"},{"location":"user/manual/project_preparation/","title":"How to set up a project to work with the animation plugin","text":"<p>1. The first step for getting an output using the Workbench is to create a QGIS Project \u00a0 Open QGIS and click on <code>Project</code> \u2794 <code>New</code></p> <p></p> <p> </p> <p>Next, add new layers to your project. You will want a few layers; one, or more, backing layer(s) (vector layers or XYZ Tiles), a layer for the workbench to follow, and one, or more, layer(s) of animated points. The example in this section only has one animated layer. \u00a0</p> <p>To add a layer, go to <code>Layer</code> \u2794 <code>Create Layer</code> and then select the type of layer you want to add. The example adds a point layer to a GeoPackage to make the project more portable.</p> <p></p> <p>Once you have added your layers you need to add features to the layers. This is done by selecting a layer and then clicking <code>Toggle Editing</code> (<code>1</code>) \u2794 <code>Add PointFeature</code> (<code>2</code>). Then click around on your map to add as few, or as many, features as you need.</p> <p></p> <p>The example project has four layers: two point layers (<code>3</code>) and two backing layers (<code>4</code>).</p> <p></p> <p>A simple way to add a vector base layer is to type \"world\" into the coordinate textbox</p> <p>Finally, style your layers to make your project look aesthetically pleasing. To style your layers you must select the layer you want to style and then using the Layer Styling toolbar, play around with the style of the layer until it suits you. A good practice is to have your backing layers as more muted colours and your desired features as more eye-catching colours.</p> <p></p> <p>  You now have a QGIS Project. \u00a0</p> <p>2. The next step is to choose which features you want to be animated. \u00a0</p> <p>Pick the layer (or layers) that you want to have animations. Then either find, or create, the animation for the layer. Make sure you have all the correct attribution for any animations you use. Below is an example of a simple fish animation split into its frames. The frames are repeated to slow down the animation's playback speed.</p> <p> </p> <ul> <li>Now use the QGIS Expressions system with the variables introduced by the Animation Workbench to define behaviours of your symbols during flight and hover modes of your animation. \u00a0 Select the layer you want to animate and open the Layer Styling toolbar.</li> </ul> <p>If you are using <code>QGIS 3.26</code> you can simply use the new animated point symbol, or if you're using an older version of <code>QGIS 3.x</code> follow the instructions below.</p> <p>The layer should contain a <code>Raster Image Marker</code>. Once you have selected the marker you want to use click on the QGIS Expressions dropdown menu (<code>5</code>) and click on <code>Edit</code> (<code>6</code>).</p> <p></p> <p> </p> <p>You can also make a marker move along a line relative to the frame of the animation. Use the Code Snippets Section for more in-depth help.</p> <p>The example below works with the animation from earlier.</p> <p></p> <pre><code>@project_home\n|| \n'/fish/fish_00'\n||\nlpad(to_string( @frame_number % 32), 2, '0')\n||\n'.png'\n</code></pre> <p>3. Configure your animation</p> <p>After animating your markers it's time to configure your animation. Open the Animated Workbench and begin choosing between the different modes and options. \u00a0</p> <p>Open the Workbench by clicking the <code>Animation Workbench</code> (<code>7</code>) icon in the Plugin Toolbar.</p> <p> </p> <p>Configure the settings for your animation. The screenshot below is configured for the example presented in this section. The Animation Layer is selected as <code>route</code> (<code>8</code>) because that is the path that the output animation will fly along. The Zoom Range (<code>9</code>) was selected from the Map Canvas Extent, and the Frame rate per second (fps) (<code>10</code>) was set to match the number of frames of the animated markers so that they will play nicely in the output. The other settings were selected as a personal choice.</p> <p> </p> <p>Select the Output Resolution (<code>11</code>) and a location for your output by clicking on the ellipsis (three dots) or by typing in the desired file path (<code>12</code>).</p> <p> </p> <p>Refer to the Workbench User Interface section for more information about what various settings and buttons accomplish.</p> <p>4. Render your animation! \u00a0 Click <code>Run</code> and render your output. The output below is the output from the example.</p> <p></p>"},{"location":"user/manual/snippets/","title":"Snippets","text":""},{"location":"user/manual/snippets/#qgis-support","title":"\ud83c\udf0f QGIS Support","text":"<p>Should work with and version of QGIS 3.x. If you have QGIS 3.26 or better you can benefit from the animated icon support (see @nyalldawson's most excellent patch #48060).</p> <p>For QGIS versions below 3.26, you can animate markers by unpacking a GIF image into its constituent frames and then referencing a specific frame from the symbol data defined property for the image file. Note that to do this extraction below you need to have the Open Source ImageMagick application installed:</p> <p>First extract a gif to a sequence of images:</p> <pre><code>convert cat.gif -coalesce cat_%05d.png\n</code></pre> <p>Example of how to create a dynamically changing image marker based on the current frame count:</p> <pre><code>@project_home \n||\n'/gifs/cat_000'\n|| \nlpad(to_string( @frame_number % 48 ), 2, '0')\n|| \n'.png'\n</code></pre> <p>Note that for the above, 48 is the number of frames that the GIF was composed of, and it assumes the frames are in the project directory in a subfolder called <code>gifs</code>.</p>"},{"location":"user/manual/snippets/#line-of-travel","title":"Line of travel","text":"<p>In this example we use a geometry generator to create a line between the origin point and the destination point:</p> <pre><code>if (@from_feature_id = $id OR @to_feature_id = $id,\n -- read this from inside to out so \n -- last tranform the geometry back to the map crs\n transform( \n  -- densify the geometry so that when we transform\n  -- back it makes a great circle\n  densify_by_count(  \n   -- move the geometry into a crs that \n   -- shows a great circle as a straight line\n   transform( \n    -- make a line from the previous pont to the next point\n    make_line( \n     geometry(@from_feature), \n     geometry(@to_feature)\n    ),  \n    @map_crs, 'EPSG:4326'),\n   99), \n  'EPSG:4326',  @map_crs),\n None)\n</code></pre> <p></p>"},{"location":"user/manual/snippets/#showing-diagnostic-info-as-a-copyright-label","title":"Showing diagnostic info as a copyright label","text":"<p>Showing diagnostic information in the QGIS copyright label:</p> <pre><code>[%\n'Feature Variables:' ||\n' \\n------------------------' ||\n' \\nPrevious Feature ' || to_string(coalesce(attribute(@previous_feature, 'name'), '-'))  ||\n' \\nPrevious Feature ID ' || to_string(coalesce(@previous_feature_id, '-'))  ||\n' \\n' ||\n' \\nNext Feature ' || to_string(coalesce(attribute(@next_feature, 'name'), '-'))  ||\n' \\nNext Feature ID ' || to_string(coalesce(@next_feature_id, '-'))  ||\n' \\n' ||\n' \\nHover Feature ' || to_string(coalesce(attribute(@hover_feature, 'name'), '-'))  ||\n' \\nHover Feature ID ' || to_string(coalesce(@hover_feature_id, '-'))  ||\n' \\n' ||\n' \\nFrom Feature ' || to_string(coalesce(attribute(@from_feature, 'name'), '-'))  ||\n' \\nFrom Feature ID ' || to_string(coalesce(@from_feature_id, '-'))  ||\n' \\n' ||\n' \\nTo Feature ' || to_string(coalesce(attribute(@to_feature, 'name'), '-'))  ||\n' \\nTo Feature ID ' || to_string(coalesce(@to_feature_id, '-'))  ||\n' \\n' ||\n' \\nTotal Hover Frames ' || to_string(coalesce(@hover_frames, 0))  ||\n' \\nCurrent Hover Frame ' || to_string(coalesce(@current_hover_frame, 0))  ||\n' \\nTotal Travel Frames ' || to_string(coalesce(@travel_frames, 0))  ||\n' \\nCurrent Travel Frame ' || to_string(coalesce(@current_travel_frame, 0))  ||\n' \\nTotal Frame Count ' || to_string(coalesce(@total_frame_count, 0))  ||\n' \\nFrame Number ' || to_string(coalesce(@frame_number, 0))  ||\n' \\nFrame Rate ' || to_string(coalesce(@frame_rate, 0))  ||\n' \\nwith Current Animation Action: ' || @current_animation_action ||\n' \\nTo Direction ' ||  coalesce(format_number(degrees(azimuth( geometry(@hover_feature), geometry(@previous_feature) ) ) ), 0) || \n' \\nFrom Direction ' ||  coalesce(format_number(degrees( azimuth( geometry(@hover_feature), geometry(@next_feature) ) ) ), 0)\n%]\n\n\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"user/manual/snippets/#variable-size-of-labels","title":"Variable size of labels","text":"<p>Variably changing the size on a label as we approach it in the animation:</p> <p>```40 * ((@frame_number % @hover_frames) /  @hover_frames)</p> <pre><code>\n## Calculating the angle between points\n\nYou can calculate the angle between the hover point and the previous point like this:\n\n```python\ncoalesce(\n format_number(\n  degrees( \n   azimuth( \n    geometry(@hover_feature), \n    geometry(@previous_feature) \n   )\n  )\n ), 0)\n</code></pre>"},{"location":"user/manual/snippets/#rotation","title":"Rotation","text":"<p>You can set the angle of rotation for a symbol using this expression:</p> <p></p> <p></p> <p>Using this technique you can also create an animation effect showing the source direction of travel and the new destination.</p> <pre><code>scale_linear (\n @current_hover_frame,\n 0,\n @hover_frames,\n degrees( \n  azimuth( \n   geometry(@hover_feature), \n   geometry(@previous_feature) \n  )\n ),\n degrees( \n  azimuth( \n   geometry(@hover_feature), \n   geometry(@next_feature) \n  )\n )\n)\n</code></pre> <p>Will produce something like this:</p> <p></p>"},{"location":"user/manual/snippets/#flying-points-cluster","title":"Flying points cluster","text":"<p>Here is an example where we animate all the points in a cluster that are not the hover point. We use an easing function to make the animation have an interesting circular motion.</p> <p></p> <pre><code>-- Taken from https://spicyyoghurt.com/tools/easing-functions\n--    t = Time - Amount of time that has passed since the beginning of the animation. Usually starts at 0 and is slowly increased using a game loop or other update function.\n--    b = Beginning value - The starting point of the animation. Usually it's a static value, you can start at 0 for example.\n--    c = Change in value - The amount of change needed to go from starting point to end point. It's also usually a static value.\n--    d = Duration - Amount of time the animation will take. Usually a static value aswell.\n-- Sinusoidal\n-- -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n\n-- Use with the animation in static mode\nif(@hover_feature_id != $id,\narray(\n  (-@hover_frames / 2) * (cos( (pi() * @frame_number / @hover_frames ) - 1)) ,\n (-@hover_frames / 2) * (sin( (pi() * @frame_number / @hover_frames ) - 1)) \n),\narray (0,0))\n\n</code></pre> <p>This function should be applied to the offset X,Y property of the symbol.</p> <p></p>"},{"location":"user/manual/under_the_hood/","title":"What is the Workbench doing?","text":"<ul> <li> <p>What does the workbench do?</p> <p>The workbench creates animations from QGIS by generating multiple static frames (images) and then combining those frames into an animation. The user tells QGIS how the frames should change from one to the other. In <code>QGIS 3.26</code> and later the animated markers allow markers to be animated without the use of the expressions system. \u00a0</p> </li> <li> <p>How do the animated markers work?</p> <p>In the code snippet below, the user tells QGIS that as the frame count increments by one the <code>Raster Image Marker</code> should change to the next image in the sequence.</p> <p></p> <p><code>py     @project_home     ||      '/fish/fish_00'     ||     lpad(to_string( @frame_number % 32), 2, '0')     ||      '.png'</code></p> <p>The user specifies the path of the image (<code>@project_home/fish/fish_00</code>). Then the <code>lpad(to_string( @frame_number % 32), 2, '0')</code> tells QGIS to convert the frame number to a string and then modulus the number of frames by the number of animation frames (<code>32</code>) (i.e. QGIS divides the number of frames by 32 and then repeats the sequence when the remainder is zero). The <code>2</code> and <code>'0'</code> in the snippet tell QGIS to pad the <code>/fish/fish_00</code> with two zeroes at the end. Finally the <code>'.png'</code> tells QGIS the type of file to finish off the path. \u00a0</p> </li> <li> <p>Frame Output location on Windows</p> <p>For users on a Windows machine who are interested in seeing the frames before they are combined into an animation (GIF or movie) you can find them by going to \"C:\\Users\\Username\\AppData\\Local\\Temp\\animation_workbench-0000000000.png\". Bear in mind that AppData is a hidden file, so it's preferable to not make changes unless explicitly told otherwise. \u00a0</p> </li> <li> <p>Frame Output on Linux</p> <p>The frames should be in your /tmp directory.</p> </li> </ul>"},{"location":"user/manual/variables/","title":"\ud83e\uddee QGIS Expression Variables","text":"<p>The animation workbench exposes or modifies a number of different QGIS Expression variables that you can use to achieve different dynamic rendering effects.</p>"},{"location":"user/manual/variables/#common-variables","title":"Common variables","text":"<p>These variables will always be available, regardless of the animation mode</p> Variable Notes frame_number Frame number within the current dwell or pan range. frame_rate Number of frames per second that the video will be rendered at. total_frame_count Total number of frames for the whole animation across all features."},{"location":"user/manual/variables/#fixed-extent-mode-variables-with-layer","title":"Fixed extent mode variables (with layer)","text":"<p>These variables are available when in the fixed extent animation mode when a vector layer has been set</p> Variable Notes hover_feature The feature we are currently hovering over hover_feature_id Feature ID for the feature we a current hovering over previous_feature The previously visited feature (or NULL if there isn't one) previous_feature_id Feature ID for the previously visited feature (or NULL if there isn't one) next_feature The next feature to visit after the current one (or NULL if there isn't one) next_feature_id Feature ID for the next feature to visit after the current one (or NULL if there isn't one) current_hover_frame The frame number for the current feature (i.e. how many frames we have hovered at the current feature) hover_frames Number of frames we will hover at the current feature for current_animation_action Always \"Hovering\""},{"location":"user/manual/variables/#planarsphere-modes","title":"Planar/Sphere modes","text":"<p>These variables are available in the Planar or Sphere mode.</p> Variable Notes current_animation_action Either \"Hovering\" or \"Travelling\""},{"location":"user/manual/variables/#when-hovering","title":"When hovering","text":"<p>These variables are available in planar or sphere mode, when the animation is currently hovering over a feature</p> Variable Notes hover_feature The feature we are currently hovering over hover_feature_id The feature ID for the feature we are currently hovering over previous_feature The previously visited feature (or NULL if there isn't one) previous_feature_id Feature ID for the previously visited feature (or NULL if there isn't one) next_feature The next feature to visit after the current one (or NULL if there isn't one) next_feature_id Feature ID for the next feature to visit after the current one (or NULL if there isn't one) current_hover_frame The frame number for the current feature (i.e. how many frames we have hovered at the current feature) hover_frames Number of frames we will hover at the current feature for"},{"location":"user/manual/variables/#when-travelling","title":"When travelling","text":"<p>These variables are available in planar or sphere mode, when the animation is currently travelling between two features</p> Variable Notes from_feature The feature we are travelling away from from_feature_id The feature ID for the feature we are travelling away from to_feature The feature we are heading toward to_feature_id The feature ID for the feature we are heading toward current_travel_frame The frame number for the current travel operation travel_frames Number of frames we will travel between the current features"},{"location":"user/manual/variables/#example-expressions","title":"Example expressions","text":"<p>Visit the snippets section of our documentation for example expressions.</p>"},{"location":"user/manual/workbench_ui/","title":"The Workbench User Interface","text":""},{"location":"user/manual/workbench_ui/#animation-plan","title":"Animation Plan","text":"<ul> <li>Render Modes (<code>1</code>): These determine the behaviour and type of animation</li> <li><code>Sphere</code>: The coordinate reference system (CRS) will be manipulated to create a       spinning globe effect. Like Google Earth might do, but with your own data and       cartography.</li> <li><code>Planar</code>: The coordinate reference system (CRS) will not be altered, but the camera       will pan and zoom to each point. It lets you move from feature to feature on a       flat map, pausing at each if you want to.</li> <li> <p><code>Fixed extent</code>: The frame of reference stays the same and you can animate the       symbology within that scene.</p> </li> <li> <p>Animation Layer (<code>2</code>):</p> </li> <li><code>Dropdown menu</code>: This allows you to select which map layer you want the animation       to follow.</li> <li> <p><code>Loop from final feature back to first feature</code>: allows for a seamlessly looping       output GIF or movie(MP4).</p> </li> <li> <p>Zoom Range (<code>3</code>): The scale range that the animation should move through.</p> </li> <li>Minimum (exclusive): The zenith (highest point) of the animation when it zooms out       while travelling between points, i.e. the most \"zoomed out\".</li> <li> <p>Maximum (inclusive): The scale (zoom level) used when we arrive at each point,       i.e. the most \"zoomed in\".</p> </li> <li> <p>Data defined settings (<code>4</code>)</p> </li> <li> <p>Scale</p> <ul> <li>Minimum: User-defined minimum scale</li> <li>Maximum: User-defined maximum scale</li> </ul> </li> <li> <p>Animation Frames (<code>5</code>)</p> </li> <li>Frame rate per second (fps): When writing to video or gif, how many frames per       second to use.</li> <li>Travel Duration: This is the number of seconds that the animation will take during       animation from one feature to the next.</li> <li>Feature Hover duration: This is the number of seconds that the animation will hover       over each feature.</li> </ul> <p></p> <ul> <li>Extent (<code>6</code>):</li> <li>Can be manually entered using North, East, South, and West coordinates as limits.</li> <li>Can be calculated from a map layer, the layout map, or a bookmark.</li> <li>Can be set to match the Map Canvas Extent</li> <li> <p>Can be set as a rectangular extent using the <code>Draw on Canvas</code> feature.</p> </li> <li> <p>Pan and Zoom Easings (<code>7</code>)</p> </li> <li>What are Easings: Easings are transitions from one state to another along a smooth       curve. A user can specify the shape of the curve used.</li> <li>Pan Easings (XY): The pan easing will determine the motion characteristics of the       camera on the X and Y axis as it flies across the scene (i.e. how it accelerates       or decelerates between points)</li> <li> <p>Zoom Easing (Z): The pan easing will determine the motion characteristics of the       camera on the Z axis as it flies across the scene (i.e. how the camera zooms in       and out of the points)</p> </li> <li> <p>Frame previews (<code>8</code>): A preview of what each frame of the animation will look like. A     user can decide which <code>Frame</code> to view.</p> </li> </ul>"},{"location":"user/manual/workbench_ui/#intro-tab","title":"Intro Tab","text":"<p>Edit the intro section of the generated movie here.</p> <p></p> <ul> <li>Media: List of the various images or movies selected for the intro section. You can   drag and drop items in the list to change the play order.</li> <li>Add Media (Plus sign) (<code>1</code>): Add images or movies</li> <li> <p>Remove Media (Minus sign) (<code>2</code>): Remove images or movies</p> </li> <li> <p>Duration (<code>3</code>): For images, you can set a duration for each image (in seconds).</p> </li> <li> <p>Preview Frame (<code>4</code>): This shows what the media will look like.</p> </li> <li> <p>Details: Provides details about where the media is stored on your computer.</p> </li> </ul>"},{"location":"user/manual/workbench_ui/#outro-tab","title":"Outro Tab","text":"<p>Edit the outro section of the generated movie here.</p> <p></p> <ul> <li>Media: List of the various images or movies selected for the outro section. You can   drag and drop items in the list to change the play order.</li> <li>Add Media (Plus sign) (<code>1</code>): Add images or movies</li> <li> <p>Remove Media (Minus sign) (<code>2</code>): Remove images or movies</p> </li> <li> <p>Duration (<code>3</code>): For images, you can set a duration for each image (in seconds).</p> </li> <li> <p>Preview Frame (<code>4</code>): This shows what the media will look like.</p> </li> <li> <p>Details: Provides details about where the media is stored on your computer.</p> </li> </ul>"},{"location":"user/manual/workbench_ui/#soundtrack-tab","title":"Soundtrack Tab","text":"<ul> <li>Media: List of the various sound files (.mp3 or .wav) to play during the generated movie.   You can drag and drop items in the list to change the play order.</li> <li>Add Media (Plus sign) (<code>1</code>): Add sound files (.mp3 or .wav) to play during the             generated movie.</li> <li> <p>Remove Media (Minus sign) (<code>2</code>): Remove sound files (.mp3 or .wav)</p> </li> <li> <p>Duration (<code>3</code>): The cumulative length of your soundtracks should be as long, or longer,           than your movie, including the intro/outro sections. If the soundtrack is longer           than the movie it will be truncated (shortened) when the movie ends.</p> </li> <li> <p>Details: Provides details about where the media is stored on your computer.</p> </li> </ul>"},{"location":"user/manual/workbench_ui/#output","title":"Output","text":"<ul> <li>Output Options: Select which output format you would like. Regardless of the format chosen,   a folder of images will be created, one image per frame.</li> <li>Re-use cached Images (<code>1</code>): This will not erase cached images on disk and will resume     processing from the last cached image.</li> <li>Animated GIF (<code>2</code>): For this export to work, you need to have the ImageMagick 'convert'     application available on your system.</li> <li>Movie (MP4) (<code>3</code>): For this option to work, you need to have the 'ffmpeg' application     on your system.</li> <li>Output Resolution (<code>4</code>): Allows a user to specify one of four image resolutions     for the output animation. The numbers in brackets for the first three options represent     the width and height of the output in pixels (i.e. width x height), and the fourth     option matches the output's size to the size of the <code>Map Canvas</code> on the screen.</li> <li>File selection (ellipsis) (<code>5</code>): This lets a user select the location where the output     will be stored.</li> </ul>"},{"location":"user/manual/workbench_ui/#progress","title":"Progress","text":"<ul> <li>Frame Preview (<code>1</code>): A preview of what each frame of the animation will look like.             It changes automatically as the workbench runs.</li> <li>Progress (<code>2</code>): This provides a detailed look at what is happening while the workbench             runs.</li> <li>Total Tasks: This number represents the total number of frames that will be generated     by the workbench.</li> <li>Completed Tasks: The number of tasks that have completed being processed.</li> <li>Remaining Features: The number of features from your animation layer that still need     to be processed.</li> <li>Active Tasks: The number of tasks (threads) currently being run by the workbench</li> <li>Features Complete: The number of tasks that have been processed by the workbench.</li> <li>Logs (<code>3</code>): A detailed list of what steps the workbench is doing (a record of processing)</li> <li>Progress Bar (<code>4</code>): A visual representation of the workbench's progression as a percentage.</li> </ul>"},{"location":"user/manual/workbench_ui/#other-buttons","title":"Other Buttons","text":"<ul> <li><code>Run</code>: Starts the process of getting an output from the workbench. It is greyed out             until a user provides a destination for the output file.</li> <li><code>Close</code>: Closes the workbench.</li> <li><code>Cancel</code>: Ends the workbench processing at whatever point it has reached when the             button is pressed.</li> <li><code>Help</code>: Opens a link to the Animation Workbench documentation.</li> </ul>"},{"location":"user/quickstart/","title":"Quickstart","text":"<p>Content needed</p>"},{"location":"user/quickstart/configure/","title":"Initial Configuration","text":"<p>There is nothing really to configure! We do provide a few options in the configuration dialog, but most users should not need to change them.</p> <p>You can access the QGIS Animation Workbench plugin options by opening the standard QGIS Setting dialog and clicking on the animation workbench tab.</p> <p>Settings \u2794 Options</p> <p></p> <ul> <li>Animation Workbench plugin Options (<code>1</code>)</li> </ul> <p>Currently there are just three configuration options:</p> <ul> <li>Number of concurrent render tasks (<code>2</code>): This is the number of concurrent tasks that will be used to render animations. The default is 1.</li> <li>Enable developer mode (<code>3</code>): This is a developer option that enables the developers to see an icon in the toolbar which will start the debug remote server.</li> <li>Verbose logging mode (<code>4</code>): This will add extra messages in the logging pane to help you understand what is going on during the rendering process.</li> </ul>"},{"location":"user/quickstart/install/","title":"Installing the QGIS Animation Workbench plugin","text":"<p>In this section we explain how to install the plugin.</p>"},{"location":"user/quickstart/install/#install-from-plugin-manager","title":"Install from plugin manager","text":"<p>To access the QGIS Plugin Manager you simply need to select <code>Plugins</code> \u27a1 <code>Manage and Install Plugins...</code> (<code>1</code>) in the Menu Toolbar.</p> <p></p> <p>Once the QGIS Plugin Manager loads, you need to navigate to the <code>All</code> (<code>2</code>) tab and type \"animation\" into the search bar (<code>3</code>). Select QGIS Animation Workbench from the list of available plugins and then select <code>Install Plugin</code> (<code>4</code>).</p> <p></p> <p>Once the Animation Workbench is installed, you can access it by clicking on the <code>Animation Workbench</code> icon (<code>5</code>) in the Plugin Toolbar.</p> <p></p> <p>Note if you are on Ubuntu, you may need to install the Qt5 multimedia libraries.</p> <pre><code>sudo apt install PyQt5.QtMultimedia\n</code></pre>"},{"location":"user/quickstart/install/#manual-install-from-github-tagged-release","title":"Manual install from GitHub (tagged release)","text":"<p>To install, visit the Github Repository, click on the <code>Actions</code> tab, and click on the <code>Make QGIS Plugin Zip For Manual Installs</code> workflow (the bottom one).</p> <p></p> <p>Click on the most recent workflow run (the top one).</p> <p></p> <p>Scroll down on the on the page.</p> <p></p> <p>And click on <code>animation_workbench</code> to download the most recent build of the plugin</p> <p></p> <p>Download the <code>animation_workbench.zip</code> file and open it in QGIS using the plugin manager as described below.</p> <ol> <li>Open QGIS</li> <li>Plugins \u27a1 Manage and install plugins ...</li> <li>Choose the Install from zip tab </li> <li>Select the animation_workbench.zip download</li> <li>Click the Install Plugin button.</li> </ol> <p>Note if you are on Ubuntu, you may need to install the Qt5 multimedia libraries.</p> <pre><code>sudo apt install PyQt5.QtMultimedia\n</code></pre>"},{"location":"user/quickstart/using/","title":"Using the Animation Workbench","text":"<p>In this section, we describe the general workflow for using the Animation Workbench.</p>"},{"location":"user/quickstart/using/#process-overview","title":"Process Overview","text":"<ol> <li>Create a QGIS project!</li> <li>Identify features that will be animated.</li> <li>Use the QGIS Expressions system with the variables introduced by the Animation    Workbench to define behaviours of your symbols during flight and hover modes of your    animation.</li> <li>Open the Animation Workbench and configure your animation, choosing between the    different modes and options.</li> <li>Render your animation!</li> </ol>"},{"location":"user/quickstart/using/#more-in-depth-process","title":"More in Depth Process","text":"<p>1. Create a QGIS Project \u00a0 Open QGIS and click on <code>Project</code> \u2794 <code>New</code></p> <p></p> <p> </p> <p>Add new layers to your project</p> <p></p> <p>A simple way to add a base layer is to type \"world\" (<code>1</code>) into the coordinate textbox</p> <p>Style the layers you've added to make your project look a bit better. Select the layer (<code>2</code>) you want to style and in the Layer Styling toolbar (<code>3</code>), style the layer to look appealing to you.</p> <p></p> <p> </p> <p>2. Identify features that will be animated. \u00a0</p> <p>Pick the layer (or layers) that you want to animate. Then either find or create the animation for the layer. Make sure you have all the correct attribution for any animations you use. Below is an example of an animation split into its frames.</p> <p></p> <p>3. Use the QGIS Expressions system with the variables introduced by the Animation Workbench to define behaviours of your symbols during flight and hover modes of your animation. \u00a0</p> <p>Select the layer you want to animate and open the Layer Styling toolbar.</p> <p>If you are using <code>QGIS 3.26</code> you can simply use the new animated point symbol, or if you're using an older version of <code>QGIS 3.x</code> follow the instructions below.</p> <p>The layer should be a <code>Raster Image Marker</code>. Once you have selected the image you want to use click on the QGIS Expressions dropdown menu (<code>4</code>) and click on <code>Edit</code> (<code>5</code>).</p> <p></p> <p>  Use the Code Snippets Section for more in depth help. The example below works with the bird animation from earlier</p> <p></p> <pre><code>   @project_home\n   ||\n   '/bird/bird_00'\n   || \n   lpad(to_string(@frame_number % 9), 2, '0')\n   || \n   '.png'\n</code></pre> <p>1. Open the Animation Workbench and configure your animation, choosing between the different modes and options. \u00a0</p> <p>Open the Workbench by clicking the <code>Animation Workbench</code> (<code>6</code>) icon in the Plugin Toolbar.</p> <p> </p> <p>Configure the settings for your animation. The screenshot below is configured for the example presented in this section. The Animation Layer is selected as route (<code>7</code>) because that is the path the animation will fly along, the Zoom Range (<code>8</code>) was selected from the Map Canvas Extent, and the Frame rate per second (<code>9</code>) was set to 9 to match the bird animation.</p> <p> </p> <p>Set your desired <code>Output Options</code> (<code>10</code>) Select a location for your output (<code>11</code>).</p> <p> </p> <p>Refer to the Workbench User Interface Section for more information about what various settings and buttons accomplish.</p> <p>2. Render your animation! \u00a0 Click <code>Run</code> and render your output. The output below is the output from the example.</p> <p></p>"}]}